using Microsoft.VisualBasic.FileIO;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using OpenVAS_To_Markdown.Classes;
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Linq;

namespace OpenVAS_To_Markdown
{
    class Program
    {
        public static List<string> IPs { get; set; } = new List<string>();
        public static List<Host> Hosts { get; set; } = new List<Host>();

        static void Main(string[] args)
        {
            string json = CsvToJson(@"C:\Users\Constantin\Documents\GitHub\openvas-to-markdown\test.csv");
            JArray jArray = JArray.Parse(json);

            foreach (JObject item in jArray)
                IPs.Add(item.GetValue("IP").ToString());

            foreach (var ip in IPs.Select(x => x).Distinct())
            {
                var host = new Host
                {
                    IP = ip
                };
                Hosts.Add(host);
            }

            foreach (JObject item in jArray)
            {
                foreach (Host host in Hosts)
                {
                    if (item.GetValue("IP").ToString().Equals(host.IP))
                    {
                        Vulnerability v = new Vulnerability
                        {
                            Port = item.GetValue("Port").ToString(),
                            Protocol = item.GetValue("Port Protocol").ToString(),
                            CVSS = double.Parse(item.GetValue("CVSS").ToString(), CultureInfo.InvariantCulture),
                            SolutionType = item.GetValue("Solution Type").ToString(),
                            Severity = item.GetValue("Severity").ToString(),
                            NVTName = item.GetValue("NVT Name").ToString(),
                            Summary = item.GetValue("Summary").ToString(),
                            SpecificResult = item.GetValue("Specific Result").ToString(),
                            NVTOID = item.GetValue("NVT OID").ToString(),
                            CVEs = item.GetValue("CVEs").ToString(),
                            Timestamp = item.GetValue("Timestamp").ToString(),
                            Impact = item.GetValue("Impact").ToString(),
                            Solution = item.GetValue("Solution").ToString(),
                            AffectedOS = item.GetValue("Affected Software/OS").ToString(),
                            Insight = item.GetValue("Vulnerability Insight").ToString(),
                            DetectionMethod = item.GetValue("Vulnerability Detection Method").ToString(),
                            DetectionResult = item.GetValue("Product Detection Result").ToString(),
                            CERTs = item.GetValue("CERTs").ToString(),
                            References = item.GetValue("Other References").ToString()
                        };
                        host.AddVulnerability(v);
                    }
                }
            }

            foreach (var host in Hosts)
            {
                host.PrintReport(@"C:\Users\Constantin\Desktop\output", Host.DocumentType.Word);
            }
        }

        private static string CsvToJson(string csv_file_path)
        {
            DataTable csvData = new DataTable();
            try
            {
                using (TextFieldParser csvReader = new TextFieldParser(csv_file_path))
                {
                    csvReader.SetDelimiters(new string[] { "," });
                    csvReader.HasFieldsEnclosedInQuotes = true;
                    string[] colFields;
                    bool tableCreated = false;
                    while (tableCreated == false)
                    {
                        colFields = csvReader.ReadFields();
                        foreach (string column in colFields)
                        {
                            DataColumn datecolumn = new DataColumn(column);
                            datecolumn.AllowDBNull = true;
                            csvData.Columns.Add(datecolumn);
                        }
                        tableCreated = true;
                    }
                    while (!csvReader.EndOfData)
                    {
                        csvData.Rows.Add(csvReader.ReadFields());
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return "Error:Parsing CSV";
            }
            //if everything goes well, serialize csv to json 
            return JsonConvert.SerializeObject(csvData);
        }
    }
}
