using System;
using System.Collections.Generic;
using System.IO;
using System.Resources;
using Microsoft.Office.Interop.Word;
using OpenVAS_To_Markdown.Properties;

namespace OpenVAS_To_Markdown.Classes
{
    class Host
    {
        public string IP { get; set; }
        public string Hostname { get; set; }
        public Vulnerability HighestThreat { get; set; } = new Vulnerability();
        public int CriticalSeverityCount { get; set; } = 0;
        public int HighSeverityCount { get; set; } = 0;
        public int OtherSeverityCount { get; set; } = 0;
        public int OverallSeverityCount { get; set; } = 0;
        public int ApplicableVulns { get; set; } = 0;
        public List<Vulnerability> Vulnerabilities { get; set; }
        private Application WordApp { get; set; }
        private Document WordDoc { get; set; }
        public enum DocumentType
        {
            Markdown,
            Word
        }
        public object missing = System.Reflection.Missing.Value;

        public Host()
        {
            IP = "";
            Hostname = "";
            Vulnerabilities = new List<Vulnerability>();
        }

        public void AddVulnerability(Vulnerability v)
        {
            if (!v.NVTOID.Equals("1.3.6.1.4.1.25623.1.0.108560") && !v.NVTOID.Equals("1.3.6.1.4.1.25623.1.0.999999"))
            {
                Vulnerabilities.Add(v);
                ApplicableVulns++;

                foreach (var vuln in Vulnerabilities)
                {
                    if (vuln.CVSS > HighestThreat.CVSS)
                        HighestThreat = vuln;

                    if (vuln.CVSS >= 7.5)
                        CriticalSeverityCount++;
                    else if (vuln.CVSS < 7.5 && vuln.CVSS >= 5)
                        HighSeverityCount++;
                    else
                        OtherSeverityCount++;

                    OverallSeverityCount++;
                }
            }
        }

        public void PrintReport(string path, DocumentType type)
        {
            switch (type)
            {
                case DocumentType.Markdown:
                    throw new NotImplementedException();
                    break;
                case DocumentType.Word:
                    WordPrintReport(path);
                    break;
                default:
                    break;
            }
        }

#region Word
        private void WordPrintReport(string path)
        {
            WordOpenDocument();

            WordAddText("Titel", string.Format(Resources.Title, IP, Hostname));
            WordAddText("Überschrift 1", Resources.General);
            WordAddText("Standard", string.Format(Resources.Summary, IP, Hostname));
            WordAddText("Standard", string.Format(Resources.TechnicalSummary, OverallSeverityCount, CriticalSeverityCount, HighSeverityCount, OtherSeverityCount, HighestThreat.CVSS));
            WordAddText("Überschrift 1", Resources.Results);

            if (ApplicableVulns > 0)
            {
                foreach (var vuln in Vulnerabilities)
                {
                    if (!vuln.NVTOID.Equals("1.3.6.1.4.1.25623.1.0.108560") && !vuln.NVTOID.Equals("1.3.6.1.4.1.25623.1.0.999999"))
                    {
                        WordAddText("Überschrift 2", vuln.NVTName);
                        WordAddText("Standard", string.Format("Port: {0} / {1}", vuln.Port, vuln.Protocol));
                        WordAddText("Standard", string.Format("Severity: {0} ({1})", vuln.Severity, vuln.CVSS));

                        WordAddText("Standard", "SUMMARY:", 1, 11, 10, 0);
                        WordAddText("Standard", vuln.Summary, 0, 11, 0, 0);
                    }
                }
            }
            else
                WordAddText("Standard", "No applicable Vulnerabilities found", 1);

            WordSaveDocument(path, IP, ref missing);
        }

        private Paragraph WordAddText(object style, string text, int bold = 0, int size = 11, int spaceAfter = 10, int newlines = 0)
        {
            Paragraph para = WordDoc.Content.Paragraphs.Add(ref missing);
            para.Range.set_Style(ref style);
            if (style.Equals("Standard"))
            {
                para.Range.Font.Bold = bold;
                para.Range.Font.Size = size;
                para.Format.SpaceAfter = spaceAfter;

                Border[] borders = new Border[4];
                borders[0] = para.Borders[WdBorderType.wdBorderLeft];
                borders[1] = para.Borders[WdBorderType.wdBorderRight];
                borders[2] = para.Borders[WdBorderType.wdBorderTop];
                borders[3] = para.Borders[WdBorderType.wdBorderBottom];

                foreach (Border border in borders)
                {
                    border.LineStyle = WdLineStyle.wdLineStyleSingle;
                    border.Color = WdColor.wdColorBlack;
                }
            }
            para.Range.Text = text;

            for (int i = 0; i < newlines; i++)
                para.Range.Text += Environment.NewLine;

            para.Range.InsertParagraphAfter();

            return para;
        }

        private void WordSaveDocument(string path, string name, ref object missing)
        {
            object filename = path + "\\" + ReplaceInvalidChars(name) + ".docx";
            WordDoc.SaveAs2(ref filename);
            WordDoc.Close(ref missing, ref missing, ref missing);
            WordDoc = null;
            WordApp.Quit(ref missing, ref missing, ref missing);
            WordApp = null;
        }

        private void WordOpenDocument()
        {
            WordApp = new Application
            {
                ShowAnimation = false,
                Visible = false
            };

            WordDoc = WordApp.Documents.Add(ref missing, ref missing, ref missing, ref missing);
        }
#endregion

        private string ReplaceInvalidChars(string filename)
        {
            return string.Join("_", filename.Split(Path.GetInvalidFileNameChars()));
        }
    }
}
